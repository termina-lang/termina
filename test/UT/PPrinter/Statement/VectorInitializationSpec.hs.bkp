module UT.PPrinter.Statement.VectorInitializationXXX (spec) where

import Test.Hspec
import PPrinter
import SemanAST
import Data.Text
import Semantic.Monad
import PPrinter.Statement
import UT.PPrinter.Expression.Common

vector1, vector2, vector3, vector4 :: Statement SemanticAnns
vector1 = Declaration "vector1" vectorTS (Variable "vector0" (SemAnn undefined vectorTS)) undefined
vector2 = Declaration "vector2" twoDimVectorTS (Variable "vector1" (SemAnn undefined twoDimVectorTS)) undefined
vector3 = Declaration "vector3" vectorTS (VectorInitExpression uint32Const0 (KC (I UInt32 10)) undefined) undefined
vector4 = Declaration "vector4" twoDimVectorTS (VectorInitExpression (VectorInitExpression uint32Const0 (KC (I UInt32 5)) undefined) (KC (I UInt32 10)) undefined) undefined

renderStatement :: Statement SemanticAnns -> Text
renderStatement = render . ppStatement

spec :: Spec
spec = do
  describe "Pretty printing vector declarations" $ do
    it "Prints the statement var vector1 : [u32; 10 : u32] = vector0;" $ do
      renderStatement vector1 `shouldBe`
        pack "vector1"
    it "Prints the statement var vector2 : [[u32; 5 : u32]; 10 : u32] = vector0;" $ do
      renderStatement vector2 `shouldBe`
        pack "vector2"
    it "Prints the statement var vector3 : [u32; 10 : u32] = [0 : u32; 10 : u32];" $ do
      renderStatement vector3 `shouldBe`
        pack "vector3"
    it "Prints the statement var vector4 : [u32; 10 : u32] = [[0 : u32; 5 : u32]; 10 : u32];" $ do
      renderStatement vector4 `shouldBe`
        pack "vector4"

