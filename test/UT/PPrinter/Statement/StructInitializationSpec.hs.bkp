module UT.PPrinter.Statement.StructInitializationSpec (spec) where

import Test.Hspec
import PPrinter
import SemanAST
import Data.Text
import Semantic.Monad
import PPrinter.Statement
import UT.PPrinter.Expression.Common

-- | Initialization expression:
-- { field_a = 0 : u32, field_b = 0xFFFF0000 : u32 } : StructA
structAFieldsInit0 :: Expression SemanticAnns
structAFieldsInit0 = 
    FieldValuesAssignmentsExpression "StructA"
        [FieldValueAssignment "field_a" uint32Const0,
         FieldValueAssignment "field_b" uint32Const0xFFFF0000] undefined

tmDescriptorFieldsInit0 :: Expression SemanticAnns
tmDescriptorFieldsInit0 = 
    FieldValuesAssignmentsExpression "TMDescriptor"
        [FieldValueAssignment "field0" uint32Const0,
         FieldValueAssignment "field1" structAFieldsInit0] undefined

struct0, struct1 :: Statement SemanticAnns
struct0 = Declaration "struct0" tmDescriptorTS tmDescriptorFieldsInit0 undefined
struct1 = Declaration "struct1" tmDescriptorTS (Variable "struct0" (SemAnn undefined tmDescriptorTS)) undefined

renderStatement :: Statement SemanticAnns -> Text
renderStatement = render . ppStatement

spec :: Spec
spec = do
  describe "Pretty printing struct declarations" $ do
    it "Prints the statement var struct0 : TMDescriptor = {field0 = 0 : u32; field1 = {field_a = 0; field_b = 0xFFFF0000} : StructA} : TMDescriptor;" $ do
      renderStatement struct0 `shouldBe`
        pack ("TMDescriptor struct0;\n" ++
        "\n" ++ 
        "{\n" ++
        "    StructA struct0_field1;\n" ++
        "    __StructA__assign(&struct0_field1, (uint32_t)0, (uint32_t)4294901760);\n" ++
        "\n" ++
        "    __TMDescriptor__assign(&struct0, (uint32_t)0, &__struct0_field1);\n" ++
        "\n" ++
        "}")
    it "Prints the statement var struct1 : TMDescriptor = struct0;" $ do
      renderStatement struct1 `shouldBe`
        pack "TMDescriptor struct1 = struct0;"
